# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TradeRequest {
  id: Int!
  title: String!
  content: String!
  majorCategoryId: Float!
  minorCategoryId: Float!
  makerId: Float!
  productId: Float!
  status: TradeRequestStatus!
  createdAt: DateTime!
  ownerId: String!
  count: Float!
  viewedTimes: Float!
  targetCountryCode: String!
  owner: User!
  pendingCatches: [TradeRequestCatch!]!
  majorCategory: MajorCategoryMst!
  minorCategory: MinorCategoryMst!
  maker: MakerMst!
  product: ProductMst!
  comments: [TradeRequestComment!]!
  images: [TradeRequestImage!]!
}

enum TradeRequestStatus {
  opened
  pending
  deleted
  expired
  catched
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserBadgeMst {
  id: ID!
  name: String!
  note: String
  content: String
}

type UserBadgeStatus {
  badgeId: Float!
  ownerId: String!
  gotAt: DateTime!
  isUsing: Float!
  badgeInfo: UserBadgeMst!
}

type User {
  id: ID!
  email: String!
  countryCode: String!
  displayName: String!
  password: String!
  imgUrl: String
  owner: [TradeRequest!]!
  usingBadges: [UserBadgeStatus!]!
  requestingTrades: [TradeRequest!]!
  bankInfo: UserBankInfo
}

type UserBankInfo {
  userId: String!
  swiftCode: String!
  accountType: String
  branchCode: String
  accountNo: String!
  bank: BankNameMst!
}

type MajorCategoryMst {
  id: Int!
  name: String!
}

type MakerMst {
  id: Int!
  name: String!
  isVerificated: Float!
}

type MinorCategoryMst {
  id: Int!
  majorId: Float!
  name: String!
  majorCategory: MajorCategoryMst!
}

type Notification {
  id: Int!
  actionLink: String
  msg: String!
  createdAt: DateTime!
  createdBy: String!
  targetUserId: String
}

type TradeRequestComment {
  tradeRequestId: Int!
  content: String!
  repliesTo: Int
  isSecret: Int!
  id: Int!
  createdBy: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  author: User!
}

type TradeRequestCommentWithPagination {
  nodes: [TradeRequestComment!]!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  totalCount: Float!
}

type ProductMst {
  makerId: Float!
  id: Float!
  name: String!
  isVerificated: Float!
  maker: MakerMst!
}

type TradeRequestImage {
  id: ID!
  url: String!
  title: String!
  content: String!
}

type TradeRequestCatch {
  id: Float!
  tradeRequestId: Float!
  catcherId: String!
  createdAt: DateTime!
  msg: String!
  status: Float!
  catcher: User!
}

type Trade {
  id: Float!
  ownerId: String!
  catcherId: String!
  requestCatchId: Float!
  tradeRequestId: Float!
  createdAt: DateTime!
  owner: User!
  catcher: User!
  tradeRequest: TradeRequest!
  requestCatch: TradeRequestCatch!
}

type TradesWithPagination {
  nodes: [Trade!]!
  pageInfo: PageInfo!
}

type ChatMessage {
  id: Float!
  roomId: Float!
  type: String!
  content: String!
  createdAt: DateTime!
  createdBy: String!
  author: User!
}

type BankNameMst {
  swiftCode: String!
  lang: String!
  name: String!
  imgUrl: String
}

type BankInfo {
  swiftCode: String!
  name: String!
  imgUrl: String!
  isBranchNeeded: Float!
  isAccountTypeNeeded: Float!
}

type Query {
  users: [User!]!
  getUserByEmail(email: String!): User!
  getUserById(id: String!): User!
  signInWithEmailAndPassword(credential: SignInInput!): User!
  getTradeRequests(limit: Float = 100, countryCode: Countries, ownerId: String = ""): [TradeRequest!]!
  getTradeRequestById(id: Float!): TradeRequest!
  getMajorCategoryMsts: [MajorCategoryMst!]!
  getMinorCategoriesByMajorId(majorId: Float!): [MinorCategoryMst!]!
  getAllMakers: [MakerMst!]!
  getProductsByMakerId(makerId: Float!): [ProductMst!]!
  getNotifications(targetUserId: String!): [Notification!]!
  getComments(condition: GetTradeRequestCommentInput!): TradeRequestCommentWithPagination!
  getTradeById(id: Float!): Trade!
  getTrades(q: GetTradesQuery!): TradesWithPagination!
  getTradesByUserId(userId: String!): [Trade!]!
  getPendingRequestCatchByTradeId(tradeRequestId: Float!): [TradeRequestCatch!]!
  getPendingRequestCatchById(requestCatchId: Float!): TradeRequestCatch!
  getChatMessages(condition: GetChatMessageInput!): [ChatMessage!]!
  getBanks(countryCode: String!): [BankInfo!]!
  getBanksByUserLang: [BankInfo!]!
}

input SignInInput {
  email: String!
  password: String!
}

enum Countries {
  kor
  jpn
}

input GetTradeRequestCommentInput {
  requestId: Float!
  take: Float
  skip: Float
}

input GetTradesQuery {
  userId: String!
  userType: UserType!
  take: Float
  skip: Float
}

enum UserType {
  All
  Catcher
  Owner
}

input GetChatMessageInput {
  roomId: Float!
  take: Float = 20
}

type Mutation {
  addUser(newUser: UserInput!): User!
  addNewTradeRequest(data: NewTradeRequestInput!): TradeRequest!
  addNewNotification(data: NewNotificationInput!): Notification!
  addComment(data: NewTradeRequestCommentInput!): TradeRequestComment!
  newTradeFromCatch(catchId: Float!): Trade!
  newRequestCatch(data: NewTradeRequestCatchInput!): TradeRequestCatch!
  addNewChatMessage(data: NewChatMessageInput!): ChatMessage!
  updateBankInfo(data: UpdateBankInfoInput!): BankInfo!
}

input UserInput {
  id: String!
  email: String!
  displayName: String!
  password: String!
}

input NewTradeRequestInput {
  ownerId: String!
  majorCategoryId: Float!
  minorCategory: NewMinorCategoryInput!
  maker: NewMakerMstInput!
  product: NewProductMstInput!
  title: String!
  content: String!
  targetCountryCode: String!
}

input NewMinorCategoryInput {
  id: Float
  majorId: Float!
  name: String!
}

input NewMakerMstInput {
  id: Float
  name: String!
  isVerificated: Float
}

input NewProductMstInput {
  makerId: Float
  id: Float!
  name: String!
  isVerificated: Float
}

input NewNotificationInput {
  targetUserId: String!
  msg: String!
  actionLink: String
}

input NewTradeRequestCommentInput {
  tradeRequestId: Float!
  content: String!
}

input NewTradeRequestCatchInput {
  catcherId: String = null
  msg: String!
  tradeRequestId: Float!
}

input NewChatMessageInput {
  roomId: Float!
  content: String!
  type: ChatMessageEnum!
  createdBy: String
}

enum ChatMessageEnum {
  message
  image
}

input UpdateBankInfoInput {
  swiftCode: String!
  accountNo: String!
  accountType: String
  branchCode: String
}

type Subscription {
  userAdded: User!
  newRequests: [TradeRequest!]!
  newNotification(targetUserId: String!): Notification!
  newMessage(roomId: Float!): ChatMessage!
}